#!/bin/bash
################################################################################
openstack.local-vlan.list ()
{
    ((`ls -1 $RESULTS_PATH_HOST/ovs/bridges/br-int/ports/| wc -l`)) || return 0
    ((`find $RESULTS_PATH_HOST/ovs/bridges/br-int/ports/*/ -name vlan| wc -l`)) || return 0
    find $RESULTS_PATH_HOST/ovs/bridges/br-int/ports/*/ -name vlan| xargs -l readlink| xargs -l basename| sort -un
}

################################################################################
openstack.vlan.port.list ()
{
    local vlan=${1:-""}

    if [ -z "$vlan" ]; then
         ls $RESULTS_PATH_HOST/ovs/ports
    else
        path=$RESULTS_PATH_HOST/ovs/vlans/$vlan
        if ! [ -d "$path" ]; then
            echo "INFO: vlan $vlan not found" 1>&2
            return
        fi
        ls $path/ports
    fi
}

################################################################################

# default
openstack.ports ()
{
    local id_key=${1:-""}
    if [[ -n $id_key ]] && [[ -e $RESULTS_PATH_HOST/ovs/vlans/$id_key ]]; then
        openstack.vlan.port.list $id_key
        return
    elif [[ -n $id_key ]] && [[ -e $RESULTS_PATH_HOST/ovs/bridges/$id_key ]]; then
        openstack.bridge.port.list $id_key
        return
    fi

    ls $RESULTS_PATH_HOST/ovs/ports
}

################################################################################
openstack.port.info ()
{
    (($#)) || { plugin_usage "name|mac address"; return; }
    local id_key=$1
    local vlan=
    local mac=
    local bridge="unknown"
    local namespace=

    port=`_find_port $id_key` || return 0
    name=`basename $port`

    mac=`cat $port/hwaddr`
    if [ -e "$port/vlan" ]; then
        vlan=`readlink $port/vlan| xargs basename`
    fi
    if [ -e "$port/namespace" ]; then
        namespace=`readlink $port/namespace| xargs basename`
    fi
    of_id=`cat $port/id`
    bridge=`readlink $port/bridge| xargs basename`
    echo "Port $name:"
    echo "  - bridge: $bridge"
    echo "  - id: $of_id"
    echo "  - local-vlan: $vlan"
    echo "  - mac address: $mac"
    [ -z "$namespace" ] || echo "  - namespace: $namespace"
}
openstack.port.flows ()
{
    (($#)) || { plugin_usage "name|mac address [table]"; return; }
    local id_key=$1
    local table=
    (($#>1)) && table=$2

    port=`_find_port $id_key` || return 0

    if [ -n "$table" ]; then
        cat $port/flows/by-table/$table
        return
    fi

    echo -e "$port/flows/all\n"
    cat $port/flows/all
    [ -s "$port/flows/all" ] && echo ""

    tree $port/flows/by-proto
    tree $port/flows/by-table
}

################################################################################
openstack.bridge.port.list ()
{
    local bridge=${1:-}
    local limit=${2:-0}

    ((limit<=`ls $RESULTS_PATH_HOST/ovs/bridges| wc -l`)) || exit

    if [ -z "$bridge" ]; then
        for bridge in `ls $RESULTS_PATH_HOST/ovs/bridges`; do
            echo "$bridge:"
            openstack.bridge.port.list $bridge $((limit+=1))
            echo
        done
    else
        path=$RESULTS_PATH_HOST/ovs/bridges/$bridge
        if ! [ -d "$path" ]; then
            echo "INFO: bridge $bridge not found" 1>&2
            return
        fi
        if ((`ls $path/ports/| wc -l`)); then
            readlink $path/ports/*| xargs -l basename| column
        fi
    fi
}

################################################################################
openstack.bridge.list ()
{
    ls $RESULTS_PATH_HOST/ovs/bridges
}

################################################################################
openstack.namespace.list ()
{
    ls $RESULTS_PATH_HOST/linux/namespaces
}

# default entry points
__entry_point__.openstack.port () { openstack.port.info $@; }
__entry_point__.openstack.ports () { openstack.ports $@; }
__entry_point__.openstack.bridge () { openstack.bridge.port.list $@; }
__entry_point__.openstack.bridges () { openstack.bridge.list $@; }
__entry_point__.openstack.bridge.ports () { openstack.bridge.port.list $@; }
__entry_point__.openstack.namespaces () { openstack.namespace.list $@; }
__entry_point__.openstack.vlan.ports () { openstack.vlan.port.list $@; }
__entry_point__.openstack.vlans () { openstack.local-vlan.list $@; }

