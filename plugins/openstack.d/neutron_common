#!/bin/bash
openstack_usage ()
{
    echo "USAGE: required args $@"
}

openstack.local-vlans.info ()
{
    readlink $RESULTS_PATH_HOST/ovs/bridges/br-int/ports/*/vlan| xargs -l basename| sort -un    
}
# default
openstack.local-vlans ()
{
    # these are the neutron "internal" vlans used to identify tenant overlay networks
    openstack.local-vlans.info $@
}


openstack.ports.list ()
{
    local vlan=${1:-""}

    if [ -z "$vlan" ]; then
         ls $RESULTS_PATH_HOST/ovs/ports
    else
        path=$RESULTS_PATH_HOST/ovs/vlans/$vlan
        if ! [ -d "$path" ]; then
            echo "INFO: vlan $vlan not found"
            return
        fi
        echo -e "Ports with vlan id $vlan:"
        ls $path/ports
    fi
}
# default
openstack.ports ()
{
    openstack.ports.list $@
}

_find_port ()
{
    # try by name first
    local id_key=$1
    local port="$RESULTS_PATH_HOST/ovs/ports/$id_key"
    if [ -d "$port" ]; then
        echo $port
    else
        # then mac
        result="`find $RESULTS_PATH_HOST/ovs/ports -name hwaddr| xargs -l grep -l $id_key`"
        if [ -z "$result" ]; then
            echo "INFO: port '$id_key' not found"
            return 1
        fi
        dirname $result
    fi
}
openstack.port.list ()
{
    # alias of
    openstack.ports $@
}
openstack.port.info ()
{
    (($#)) || { openstack_usage "name|mac address"; return; }
    local id_key=$1
    local vlan=
    local mac=
    local bridge="unknown"
    local namespace=

    port=`_find_port $id_key` || return 0
    name=`basename $port`

    mac=`cat $port/hwaddr`
    if [ -e "$port/vlan" ]; then
        vlan=`readlink $port/vlan| xargs basename`
    fi
    if [ -e "$port/namespace" ]; then
        namespace=`readlink $port/namespace| xargs basename`
    fi
    of_id=`cat $port/id`
    bridge=`readlink $port/bridge| xargs basename`
    echo "Port $name:"
    echo "  - bridge: $bridge"
    echo "  - id: $of_id"
    echo "  - local-vlan: $vlan"
    echo "  - mac address: $mac"
    [ -z "$namespace" ] || echo "  - namespace: $namespace"
}
openstack.port.flows ()
{
    (($#)) || { openstack_usage "name|mac address [table]"; return; }
    local id_key=$1
    local table=
    (($#>1)) && table=$2

    echo "Port $id_key flowinfo:"
    port=`_find_port $id_key` || return 0

    if [ -n "$table" ]; then
        cat $port/flows/by-table/$table
        return
    fi

    echo -e "$port/flows/all\n"
    cat $port/flows/all
    [ -s "$port/flows/all" ] && echo ""

    tree $port/flows/by-proto
    tree $port/flows/by-table
}
# default
openstack.port ()
{
    openstack.port.info $@
}

