#!/bin/bash
ofproto-trace.port.all ()
{
    (($#)) || { plugin_usage "name|mac address"; return; }
    local id_key=$1
    local protocol=${2:-}
    local vlan=
    local mac=
    local bridge="unknown"
    local namespace=
    local ext_addr=1.1.1.1
    local port=`_find_port $id_key` || return 0
    local name=`basename $port`

    mac=`cat $port/hwaddr`
    if [ -e "$port/vlan" ]; then
        vlan=`readlink $port/vlan| xargs basename`
    fi
    if [ -e "$port/namespace" ]; then
        namespace=`readlink $port/namespace| xargs basename`
    fi

    local of_id=`cat $port/id`
    local bridge=`readlink $port/bridge| xargs basename`

    if [ "${mac:0:5}" = "fe:16" ]; then
        echo -e "IMPORTANT: it looks like this port is attached to a vm so mac address has been converted from $mac to fa:16:${mac:6}"
        mac=fa:16:${mac:6}
    fi

    # there may be > 1 port/address (e.g. allowed_address_pairs)
    if [ -e "$port/flows/by-table/71" ]; then
        readarray -t arp_spas<<<"`grep $mac $port/flows/by-table/71| sed -rn \"s/.+arp_spa=([[:digit:]\.]+)\s+.+/\1/p\"| uniq`"
    else
        readarray -t arp_spas<<<`grep $mac $port/flows/all| sed -rn "s/.+arp_spa=([[:digit:]\.]+)\s+.+/\1/p"| uniq`
    fi

    if [[ -z $protocol ]] || [[ $protocol = arp ]]; then
        [[ -n $protocol ]] && echo "" || echo -e "\n[arp]"
        if ((${#arp_spas[@]})) && [ -n "${arp_spas[0]}" ]; then
            for arp_spa in ${arp_spas[@]}; do
                echo "sudo ovs-appctl ofproto/trace ${bridge} in_port=${of_id},arp,arp_spa=${arp_spa},dl_src=${mac}"
            done
        else
            echo "no source ips found - skipping"
        fi
    fi

    if [[ -z $protocol ]] || [[ $protocol = icmp ]]; then
        [[ -n $protocol ]] && echo "" || echo -e "\n[icmp]"
        if ((${#arp_spas[@]})) && [ -n "${arp_spas[0]}" ]; then
            for arp_spa in ${arp_spas[@]}; do
                echo "sudo ovs-appctl ofproto/trace ${bridge} in_port=${of_id},ip,nw_proto=1,nw_src=${arp_spa},nw_dst=${ext_addr},dl_src=${mac}"
            done
        else
            echo "no source ips found - skipping"
        fi
    fi

    if [[ -z $protocol ]] || [[ $protocol = dhcp ]]; then
        [[ -n $protocol ]] && echo "" || echo -e "\n[dhcp]"
        echo "sudo ovs-appctl ofproto/trace ${bridge} udp,in_port=${of_id},dl_src=${mac},dl_dst=ff:ff:ff:ff:ff:ff,nw_src=0.0.0.0,nw_dst=255.255.255.255,udp_src=68,udp_dst=67"
    fi

    if [[ -z $protocol ]]; then
        echo -e "\n[vm-to-vm]"
        echo "sudo ovs-appctl ofproto/trace br-int in_port=${of_id},tcp,dl_src=${mac},dl_dst=MAC_OF_REMOTE_INSTANCE"
        echo "sudo ovs-appctl ofproto/trace br-int in_port=${of_id},dl_vlan=${vlan},dl_src=${mac},dl_dst=MAC_OF_REMOTE_INSTANCE"
    fi
}
# default
ofproto-trace.port ()
{
    ofproto-trace.port.all $@
}

