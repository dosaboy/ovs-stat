#!/bin/bash -u
TRAP_ERROR_MSG="failed to get openstack l2pop info"

# lib
for l in `find $CWD/libcode -type f`; do source $l; done

__load_neutron_l2pop_info ()
{
    local current_jobs=0
    local -a tun_port_ids=()
    local vlan
    local output

    readarray -t port_types<<<`find $RESULTS_PATH_HOST/ovs/ports -name type`
    # if port has type then it is assumed to be a tunnel port
    for type in ${port_types[@]}; do
        tun_port_ids+=( `dirname $(echo $type)| xargs -l -I{} cat {}/id` )
    done

    for bridge in `ls $RESULTS_PATH_HOST/ovs/bridges`; do
        while read line; do
            (
            vlan=`echo $line| sed -rn 's/.+dl_vlan=([[:digit:]]+)\s+.+/\1/p'`
            [ -n "$vlan" ] || exit
            # skip if no output info
            ((`echo "$line"| sed -r 's/output:/\n/g'| wc -l`>1)) || exit
            for id in ${tun_port_ids[@]}; do
                if `echo $line| egrep -q "output:$id(\$|,)"`; then
                    output=$RESULTS_PATH_HOST/ovs/bridges/$bridge/flowinfo/openstack/l2pop/vlans/$vlan/flood_ports
                    [ -d "$output" ] || mkdir -p $output
                    # NOTE: if this fails it implies there are > 1 flood flow
                    #       for this vlan which is currently not expected or
                    #       valid but that could change in the future.
                    ln -s ../../../../../../ports/$id $output
                fi
            done
            ) &
            job_wait $((++current_jobs)) && wait
        done < $RESULTS_PATH_HOST/ovs/bridges/$bridge/flows.stripped
        wait
    done
}

# main()
__load_neutron_l2pop_info 2>$RESULTS_PATH_HOST/error.$$

