#!/bin/bash -u
TRAP_ERROR_MSG="failed to get port ns info"

# lib
for l in `find $CWD/libcode -type f`; do source $l; done

__load_bridges_port_ns_attach_info ()
{
    # for each port on each bridge, determine if that port is attached to a
    # a namespace and if it is using a veth pair to do so, get info on the
    # peer interface.

    local current_jobs=0

    for bridge in `ls $RESULTS_PATH_HOST/ovs/bridges`; do
        for port in `get_ovs_bridge_ports $bridge`; do
            {
            port_suffix=${port##tap}

            # first try linux
            ns_id=`get_ip_link_show| grep -A 1 " $port:"| \
                       sed -r 's/.+link-netnsid ([[:digit:]]+)\s*.*/\1/g;t;d'`
            ns_name=
            if [ -n "$ns_id" ]; then
                ns_name=`get_ip_netns| grep "(id: $ns_id)"| \
                            sed -r 's/\s+\(id:\s+.+\)//g'`
            else
                # then try searching all ns since ovs does not provide info about which namespace a port maps to.
                ns_name="`get_ns_ip_addr_show_all| egrep "netns:|${port_suffix}"| grep -B 1 $port_suffix| head -n 1`" || true
                ns_name=${ns_name##netns: }
            fi

            if [ -n "$ns_name" ]; then
                mkdir -p $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports
                if_id=`get_ip_link_show| grep $port| sed -r "s/.+${port}@if([[:digit:]]+):\s+.+/\1/g"`

                if [ -n "$if_id" ]; then
                    ns_port="`get_ns_ip_addr_show $ns_name| 
                           sed -r \"s,^${if_id}:\s+(.+)@[[:alnum:]]+:\s+.+,\1,g;t;d\"`"
                else
                    ns_port="`get_ns_ip_addr_show $ns_name| 
                           sed -r \"s,[[:digit:]]+:\s+(.*${port_suffix})(@[[:alnum:]]+)?:\s+.+,\1,g;t;d\"`"
                fi

                if [ -n "$ns_port" ]; then
                    if [ "$ns_port" != "$port" ]; then
                        # it is a veth peer
                        if [ -e "$RESULTS_PATH_HOST/linux/ports/$port" ]; then
                            mkdir -p $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
                            ln -s ../../../../ports/$port \
                                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port/veth_peer

                            ln -s ../../namespaces/$ns_name/ports/$ns_port \
                                $RESULTS_PATH_HOST/linux/ports/$port/veth_peer

                            mac="`get_ns_ip_addr_show $ns_name| \
                                  grep -A 1 $port_suffix| \
                                  sed -r 's,.*link/ether\s+([[:alnum:]\:]+).+,\1,g;t;d'`"
                            echo $mac > $RESULTS_PATH_HOST/linux/ports/$port/veth_peer/hwaddr
                        else
                            echo "WARNING: ns veth pair peer (host) port $port not found"
                        fi
                    else
                        if [ -e "../../../ports/$port" ]; then
                            ln -s ../../../ports/$port \
                                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
                            ln -s ../../../linux/namespaces/$ns_name \
                                $RESULTS_PATH_HOST/linux/ports/$ns_port/namespace
                            port_path="$RESULTS_PATH_HOST/linux/ports/$ns_port"
                        else
                            ln -s ../../../../ovs/ports/$port \
                                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
                            ln -s ../../../linux/namespaces/$ns_name \
                                $RESULTS_PATH_HOST/ovs/ports/$ns_port/namespace
                            port_path="$RESULTS_PATH_HOST/ovs/ports/$ns_port"
                        fi
                        mac="`get_ns_ip_addr_show $ns_name| \
                              grep -A 1 $port| \
                              sed -r 's,.*link/ether\s+([[:alnum:]\:]+).+,\1,g;t;d'`"
                        echo $mac > $port_path/hwaddr
                    fi
                fi
            fi
            } &
            job_wait $((++current_jobs)) && wait
        done
        wait
    done
}

# main()
__load_bridges_port_ns_attach_info 2>$RESULTS_PATH_HOST/error.$$

