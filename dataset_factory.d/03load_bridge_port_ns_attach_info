#!/bin/bash -u
TRAP_ERROR_MSG="failed to get port ns info"

# lib
for l in `find $CWD/common -type f`; do source $l; done

__get_port_ns_attach_info ()
{
    local port="$1"
    # NOTE: this is an Openstackism whereby a veth pair with the form
    #       tapxxxxxxxx-xx/ns-xxxxxxxx-xx is created and therefore any other
    #       naming convention won't be caught here.
    # FIXME: we need a better way to do this.
    local port_suffix=${port##tap}
    local ns_id=""
    local ns_name=""
    local ns_port=""
    local mac

    # first try linux
    ns_id=`get_ip_link_show| grep -A 1 " $port:"| \
               sed -r 's/.+link-netnsid ([[:digit:]]+)\s*.*/\1/g;t;d'`
    if [ -n "$ns_id" ]; then
        ns_name=`get_ip_netns| grep "(id: $ns_id)"| \
                    sed -r 's/\s+\(id:\s+.+\)//g'`
    else
        # then try searching all ns since ovs does not provide info about which namespace a port maps to.
        ns_name="`get_ns_ip_addr_show_all| egrep "netns:|${port_suffix}"| grep -B 1 $port_suffix| head -n 1`" || true
        ns_name=${ns_name##netns: }
    fi

    [ -n "$ns_name" ] || return 0

    mkdir -p $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports
    if_id=`get_ip_link_show| grep $port| sed -rn "s/.+${port}@if([[:digit:]]+):\s+.+/\1/p"`

    if [ -n "$if_id" ]; then
        ns_port="`get_ns_ip_addr_show $ns_name| 
               sed -rn \"s,^${if_id}:\s+(.+)@[[:alnum:]]+:\s+.+,\1,p\"`"
    else
        ns_port="`get_ns_ip_addr_show $ns_name| 
               sed -rn \"s,[[:digit:]]+:\s+(.*${port_suffix})(@[[:alnum:]]+)?:\s+.+,\1,p\"`"
    fi

    [ -n "$ns_port" ] || return 0

    if [ "$ns_port" != "$port" ]; then
        # it is a veth peer
        if [ -e "$RESULTS_PATH_HOST/linux/ports/$port" ]; then
            mkdir -p $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
            ln -s ../../../../ports/$port \
                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port/veth_peer

            ln -s ../../namespaces/$ns_name/ports/$ns_port \
                $RESULTS_PATH_HOST/linux/ports/$port/veth_peer

            mac="`get_ns_ip_addr_show $ns_name| \
                  grep -A 1 $port_suffix| \
                  sed -rn 's,.*link/ether\s+([[:alnum:]\:]+).+,\1,p'`"
            echo $mac > $RESULTS_PATH_HOST/linux/ports/$port/veth_peer/hwaddr
        else
            echo "WARNING: ns veth pair peer (host) port $port not found"
        fi
    else
        if [ -e "../../../ports/$port" ]; then
            ln -s ../../../ports/$port \
                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
            ln -s ../../../linux/namespaces/$ns_name \
                $RESULTS_PATH_HOST/linux/ports/$ns_port/namespace
        else
            ln -s ../../../../ovs/ports/$port \
                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
            ln -s ../../../linux/namespaces/$ns_name \
                $RESULTS_PATH_HOST/ovs/ports/$ns_port/namespace
        fi
    fi
}


__load_bridge_port_ns_attach_info ()
{
    # for each port on each bridge, determine if that port is attached to a
    # a namespace and if it is using a veth pair to do so, get info on the
    # peer interface.

    local current_jobs=0

    for bridge in `ls $RESULTS_PATH_HOST/ovs/bridges`; do
        current_jobs=0
        for port in `get_ovs_bridge_ports $bridge`; do
            __get_port_ns_attach_info $port &
            job_wait $((++current_jobs)) && wait
        done
        wait
    done
}

# main()
__load_bridge_port_ns_attach_info 2>$RESULTS_PATH_HOST/error.$$

