#!/bin/bash -u
TRAP_ERROR_MSG="failed to get port ns info"

# lib
for l in `find $CWD/common -type f`; do source $l; done

__get_port_ns_attach_info ()
{
    local port="$1"
    local ns_id=""
    local ns_name=""
    local ns_port=""
    local mac
    local peer_idx=""

    # first establish if port is part of veth pair
    peer_idx=`get_ip_link_show| grep "$port"| sed -rn "s/.+\s+$port@if([[:digit:]]+):.+/\1/p"`
    if [[ -n $peer_idx ]]; then
	# get namespace id
        ns_id=`get_ip_link_show| grep -A 1 "$port@if${peer_idx}:"| \
                   sed -rn 's/.+link-netnsid\s+([[:digit:]]+)\s*.*/\1/p'`
        if [[ -n $ns_id ]]; then
            ns_name=`get_ip_netns| grep "(id: $ns_id)"| \
                        sed -r 's/\s+\(id:\s+.+\)//g'`
            if [[ -z $ns_name ]]; then
                echo "WARNING: unable to identify network namespace for port $port veth-peer"
            fi
        fi
    else
        # otherwise port will not be visible in ip link show so need to go
        # direct and search all ns.
        ns_name="`get_ns_ip_addr_show_all| egrep "netns:|$port:"| grep -B 1 "$port:"| head -n 1`" || true
        ns_name=${ns_name##netns: }   
    fi

    [ -n "$ns_name" ] || return 0

    mkdir -p $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports

    if [ -n "$peer_idx" ]; then
        ns_port=`get_ns_ip_addr_show $ns_name| \
                      sed -rn "s/^$peer_idx:\s+(.+)@if[[:digit:]]+:\s+.+/\1/p"`
    else
        `get_ns_ip_addr_show $ns_name| grep -q " $port:"` && ns_port=$port
    fi

    [ -n "$ns_port" ] || return 0

    if [ "$peer_idx" ]; then
        # veth pair
        if [ -e "$RESULTS_PATH_HOST/linux/ports/$port" ]; then
            mkdir -p $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
            ln -s ../../../../ports/$port \
                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port/veth_peer

            ln -s ../../namespaces/$ns_name/ports/$ns_port \
                $RESULTS_PATH_HOST/linux/ports/$port/veth_peer

            mac="`get_ns_ip_addr_show $ns_name| \
                  grep -A 1 $ns_port| \
                  sed -rn 's,.*link/ether\s+([[:alnum:]\:]+).+,\1,p'`"
            echo $mac > $RESULTS_PATH_HOST/linux/ports/$port/veth_peer/hwaddr
        else
            echo "WARNING: ns veth pair peer (host) port $port not found"
        fi
    else
        if [ -e "../../../ports/$port" ]; then
            ln -s ../../../ports/$port \
                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
            ln -s ../../../linux/namespaces/$ns_name \
                $RESULTS_PATH_HOST/linux/ports/$ns_port/namespace
        else
            ln -s ../../../../ovs/ports/$port \
                $RESULTS_PATH_HOST/linux/namespaces/$ns_name/ports/$ns_port
            ln -s ../../../linux/namespaces/$ns_name \
                $RESULTS_PATH_HOST/ovs/ports/$ns_port/namespace
        fi
    fi
}


__load_bridge_port_ns_attach_info ()
{
    # for each port on each bridge, determine if that port is attached to a
    # a namespace and if it is using a veth pair to do so, get info on the
    # peer interface.

    local current_jobs=0

    for bridge in `ls $RESULTS_PATH_HOST/ovs/bridges`; do
        current_jobs=0
        for port in `get_ovs_bridge_ports $bridge`; do
            __get_port_ns_attach_info $port &
            job_wait $((++current_jobs)) && wait
        done
        wait
    done
}

# main()
__load_bridge_port_ns_attach_info 2>$RESULTS_PATH_HOST/error.$$

